<% flash.each do |name, msg| %>
  <% if msg.is_a?(String) %>
    <div class="alert alert-<%= name == :notice ? "success" : "error" %>">
      <a class="close" data-dismiss="alert">&#215;</a>
      <%= content_tag :div, msg, :id => "flash_#{name}" %>
    </div>
  <% end %>
<% end %>




<div class="banner">
  <div id="logo">Welcome to Explorio
    <div id="sub_logo">Learn Something New!</div>
  </div>
</div>

<script>

var width = $('.banner').width(),
    height = $('.banner').height();

$.get('/api/interests').then(function(data){

var nodes = d3.range(data.length)

for(var j = 0; j<nodes.length; j++){
  nodes[j] = ({radius: data[j].count/20, text: data[j].topic}); 

}

    root = nodes[0],
    color = d3.scale.category10();


root.radius = 0;
root.fixed = true;

var force = d3.layout.force()
    .gravity(0.1)
    .charge(function(d, i) { return i ? 0 : -2000; })
    .nodes(nodes)
    .size([width, height]);

force.start();

var svg = d3.select(".banner").append("svg")

var container = svg.selectAll(".node")
    .data(nodes.slice(1))
    .enter().append("g")
    .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

container.append("circle")
    .attr("r", function(d) { return d.radius; })
    .style("fill", function(d, i) { return color(i % 3); })

container.append("text")
    .attr("text-anchor", "middle")
    .text(function(d) { return d.text; })
    .attr("fill", "white");
    
force.on("tick", function(e) {
  var q = d3.geom.quadtree(nodes),
      i = 0,
      n = nodes.length;

  while (++i < n) q.visit(collide(nodes[i]));

  svg.selectAll("g")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
});

svg.on("mousemove", function() {
  var p1 = d3.mouse(this);
  root.px = p1[0];
  root.py = p1[1];
  force.resume();
});

function collide(node) {
  var r = node.radius + 16,
      nx1 = node.x - r,
      nx2 = node.x + r,
      ny1 = node.y - r,
      ny2 = node.y + r;
  return function(quad, x1, y1, x2, y2) {
    if (quad.point && (quad.point !== node)) {
      var x = node.x - quad.point.x,
          y = node.y - quad.point.y,
          l = Math.sqrt(x * x + y * y),
          r = node.radius + quad.point.radius;
      if (l < r) {
        l = (l - r) / l * .5;
        node.x -= x *= l;
        node.y -= y *= l;
        quad.point.x += x;
        quad.point.y += y;
      }
    }
    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
  };
}
});

</script>
